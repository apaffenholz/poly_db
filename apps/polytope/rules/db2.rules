# Copyright (c) 2013 Silke Horn
# http://solros.de/polymake/poly_database
# 
# This file is part of the polymake extension poly_database.
# 
# poly_database is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# poly_database is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with poly_database.  If not, see <http://www.gnu.org/licenses/>.

CREDIT poly_database


# This file contains wrappers for the functions poly_db, poly_db_one and poly_db_count


# @category Database Wrappers
# Returns all smooth reflexive lattice polytopes in the database that match the query.
# Wrapper for [[poly_db]], equivalent to [[poly_db]]('LatticePolytopes', 'SmoothReflexive', //query//).
# 
# Contained in extension ''poly_database''.
# @param Hash query
# @param Bool local optional, set to 1 if you want to use a local database (on localhost), default 0
# @return Array<LatticePolytope>
user_function poly_db_smooth_reflexive {
	my $query = shift;
	my $local = shift;
	return poly_db('LatticePolytopes', 'SmoothReflexive', $query, $local);
}

# @category Database Wrappers
# Returns one smooth reflexive lattice polytope in the database that matches the query.
# Wrapper for [[poly_db_one]], equivalent to [[poly_db_one]]('LatticePolytopes', 'SmoothReflexive', //query//).
# 
# Contained in extension ''poly_database''.
# @param Hash query
# @param Bool local optional, set to 1 if you want to use a local database (on localhost), default 0
# @return Array<LatticePolytope>
user_function poly_db_smooth_reflexive_one {
	my $query = shift;
	my $local = shift;
	return poly_db_one('LatticePolytopes', 'SmoothReflexive', $query, $local);
}


# @category Database Wrappers
# Returns the number of smooth reflexive lattice polytopes in the database that match the query.
# Wrapper for [[poly_db_count]], equivalent to [[poly_db_count]]('LatticePolytopes', 'SmoothReflexive', //query//).
# 
# Contained in extension ''poly_database''.
# @param Hash query
# @param Bool local optional, set to 1 if you want to use a local database (on localhost), default 0
# @return Int
user_function poly_db_smooth_reflexive_count {
	my $query = shift;
	my $local = shift;
	return poly_db_count('LatticePolytopes', 'SmoothReflexive', $query, $local);
}



# @category Database Wrappers
# Returns the smooth reflexive lattice polytopes in the database of a given dimension //d//. (This is only recommended for //d// <= 6.)
# Wrapper for [[poly_db]], equivalent to [[poly_db]]('LatticePolytopes', 'SmoothReflexive', {'CONE_DIM' => //d//+1}).
# 
# Contained in extension ''poly_database''.
# @param Int d
# @return Array<LatticePolytope>
user_function poly_db_smooth_reflexive_dim {
	my $d = shift;
	return poly_db('LatticePolytopes', 'SmoothReflexive', {'CONE_DIM' => $d+1});
}

# @category Database Wrappers
# Returns the (unique) smooth reflexive lattice polytope in the database with a given [[_id]].
# The IDs are of the form ''F.(dim)D.(some digits)'', e.g. ''F.3D.0000'' is the first 3-dimensional polytope in the database.
# 
# Contained in extension ''poly_database''.
# @param String id
# @param Bool local optional, set to 1 if you want to use a local database (on localhost), default 0
# @return LatticePolytope
user_function poly_db_smooth_reflexive_id {
	my $id = shift;
	my $local = shift;
	return poly_db('LatticePolytopes', 'SmoothReflexive', {'_id' => $id}, $local)->[0];
}

# @category Database Wrappers
# Returns the smooth reflexive lattice polytopes in the database with a given number of vertices.
# Wrapper for [[poly_db]], equivalent to [[poly_db]]('LatticePolytopes', 'SmoothReflexive', {'N_VERTICES' => //n//}).
# 
# Contained in extension ''poly_database''.
# @param Int n
# @return Array<LatticePolytope>
user_function poly_db_smooth_reflexive_vertices {
	my $n = shift;
	return poly_db('LatticePolytopes', 'SmoothReflexive', {'N_VERTICES' => $n});
}



