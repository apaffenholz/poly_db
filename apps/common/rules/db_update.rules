# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension poly_db.
# 
# poly_db is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# poly_db is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with poly_db.  If not, see <http://www.gnu.org/licenses/>.



# @category Database
# Updates a list of objects in the collection //col// in the database //db//. Moreover, it matches their properties with the template object for this collection. (This is more efficient then looping over the list.)
# 
# Note that you need write access to the database for this. You will be asked for credentials if you don't specify them.
# 
# Contained in extension ''poly_db''.
# @param Array obj_list either an Array<[[Core::Object]]> of polymake objects or an Array<String> of [[_id|IDs]]
# @param String db database name
# @param String col collection name
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username
# @option String password
# @option String contrib use this to update the [[contributor]]
user_function db_batch_update(Array, $, $, {local => 0, username => "", password => "", contrib => ""}) {
	my ($obj_list, $db_name, $col_name, $options) = @_;
	my $u = $options->{username};
	my $p = $options->{password};
	my $local = $options->{local};
	
	unless ($u || $local) {
		my @cred = get_credentials;
		$u = $cred[0];
		$p = $cred[1];
	}

	my $by_id;
	if ($obj_list->type->full_name eq "Array<String>") {
		$by_id = 1;
	}

	my $t = get_template_object($db_name, $col_name, local => $local);
	my $fst;
	if ($by_id) {
		unless ($fst = poly_db_one({'_id' => $obj_list->[0]}, lup($options), db => $db_name, collection => $col_name)) {
			print "non-existent id: $obj_list->[0]\n";
			return;
		}
	} else {
		$fst = $obj_list->[0];
	}

	my $sched = $fst->get_schedule($t->list_properties);
	
	my $client = get_client($options);
	
	foreach my $curr (@$obj_list) {

		my $id; my $obj;
		if ($by_id) {
			$id = $curr;
			unless ($obj = poly_db_one({'_id' => $id}, lup($options), client => $client, db => $db_name, collection => $col_name)) {
				print "non-existent id: $obj_list->[0]\n";
				return;
			}
		} else {
			$obj = $curr;
			$id = $obj->_id;	
		}

		my $contrib;
		unless ($contrib = $options->{contrib}) {
			$contrib = $obj->contributor;	
		}
		
		db_update_one($db_name, $col_name, $obj, local => $local, username => $u, password => $p, contrib => $contrib, schedule => $sched, template => $t, client => $client);
	}
}


# @category Database
# Updates the object with a given [[_id]] in the collection //col// in the database //db// by matching its properties with the template object for this collection.
# 
# Note that you need write access to the database for this. You will be asked for credentials if you don't specify them.
# 
# Contained in extension ''poly_db''.
# @param String db database name
# @param String col collection name
# @param String id
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username
# @option String password
# @option String contrib use this to update the [[contributor]]
# @option Core::ChainRule schedule
# @return String
user_function db_update_id($, $, $, {local => 0, username => "", password => "", contrib => "", schedule => undef, template => undef}) {
	
	my ($db_name, $col_name, $id, $options) = @_;
	
	my $p;
	unless ($p = poly_db_one({'_id' => $id}, lup($options), db => $db_name, collection => $col_name)) {croak("non-existent id: $id\n");}
	
	return db_update_one($db_name, $col_name, $p, $options);
}


# @category Database
# Updates an object //obj// in the collection //col// in the database //db//. Moreover, it matches its properties with the template object for this collection.
# 
# Note that you need write access to the database for this. You will be asked for credentials if you don't specify them.
# 
# Contained in extension ''poly_db''.
# @param String db database name
# @param String col collection name
# @param Core::Object obj
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username
# @option String password
# @option String contrib use this to update the [[contributor]]
# @option Core::ChainRule schedule
# @option Core::Object template
# @option MongoClient client
# @return String
function db_update_one($, $, $, {local => 0, username => "", password => "", contrib => "", schedule => undef, template => undef, client => undef}) {

	my ($db_name, $col_name, $obj, $options) = @_;

	my $t;
	unless (defined($t = $options->{template})) {
		$t = get_template_object($db_name, $col_name, local => $options->{local});
	}
	
	my $id = $obj->_id;
	my $contrib;
	unless ($contrib = $options->{contrib}) {
		$contrib = $obj->contributor;	
	}
	
	copy_properties_db($obj, $t, schedule => $options->{schedule});
	
	my $client;
	unless(defined($client = $options->{client})) {
		$client = get_client($options);	
	}
	my $collection = get_collection($client, $db_name, $col_name);
	
	return $collection->save(pm2json($obj, $id, $contrib));
}
