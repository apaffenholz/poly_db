# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension poly_db.
# 
# poly_db is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# poly_db is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with poly_db.  If not, see <http://www.gnu.org/licenses/>.

CREDIT poly_db


#use IO::Prompt;

# poly_db: The hostname of the database, default 'polymake.org'
custom $db_host = "polymake.org";

# poly_db: The port of the database, default 27017
custom $db_port = "27017";

# poly_db: The database username, default 'polymake'
custom $db_user = "polymake";

# poly_db: The database password, default 'database'
custom $db_pwd = "database";

# poly_db: The name of the authentication database, default 'admin'
custom $auth_db = "admin";

# poly_db: The name of the type database, default 'pm'
custom $type_db = "pm";



# @category Database
# Returns all objects in the database //db// in //collection// that match the query. This is only recommended for a reasonably small number of matching objects. If you expect many such objects you should instead construct a [[DatabaseCursor]].
# 
# Contained in extension ''poly_db''.
# @param String db name of the database, see ...
# @param String collection name of the collection
# @param Hash query
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username 
# @option String password
# @return Array<Core::Object>
user_function poly_db ($, $, $, {local => 0, username => "", password => ""}){
	my ($db_name, $collection, $query, $options) = @_;
	my $client = get_client($options);
	my $type = get_type($client, $db_name, $collection);
	my $col = get_collection($client, $db_name, $collection);	

	my $output = $col->find($query);
	unless ($output) {print "No such object.\n"; return;}
	
	undef $client;
	return cursor2array($output, $type);
}

# @category Database
# Returns one object in the database //db// in //collection// that matches the query.
# 
# Contained in extension ''poly_db''.
# @param String db name of the database, see ...
# @param String collection name of the collection
# @param Hash query
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username 
# @option String password
# @return Core::Object
user_function poly_db_one ($, $, $, {local => 0, username => "", password => "", client => undef}){
	my ($db_name, $collection, $query, $options) = @_;
	
	my $client;
	unless(defined($client = $options->{client})) {
		$client = get_client($options);
	}
	
	my $type = get_type($client, $db_name, $collection);
	my $col = get_collection($client, $db_name, $collection);	
		
	my $output = $col->find_one($query);
	
	unless ($output) { croak("No such object.\n"); }
	return doc2object($output, $type);
}


# @category Database
# Returns the number of objects in the database //db// in //collection// that match the query.
# 
# Contained in extension ''poly_db''.
# @param String db name of the database, see ...
# @param String collection name of the collection
# @param Hash query
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username 
# @option String password
# @return Int
user_function poly_db_count($, $, $, {local => 0, username => "", password => ""}) {
	my ($db_name, $collection, $query, $options) = @_;
	my $client = get_client($options);
	my $type = get_type($client, $db_name, $collection);
	my $col = get_collection($client, $db_name, $collection);	

	undef $client;
	return $col->count($query);
}
