# Copyright (c) 2013 Silke Horn
# http://solros.de/polymake/poly_database
# 
# This file is part of the polymake extension poly_database.
# 
# poly_database is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# poly_database is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with poly_database.  If not, see <http://www.gnu.org/licenses/>.

CREDIT poly_database

use MongoDB;
use MongoDB::OID;


# poly_database: The hostname of the database, default 'polymake.org'
custom $db_host = "polymake.org";

# poly_database: The port of the database, default 27017
custom $db_port = "27017";

# poly_database: The database user, default 'polymake'
custom $db_user = "polymake";

# poly_database: The database password, default 'database'
custom $db_pwd = "database";



# @category Database
# Returns the objects in the database //db// in //collection// that match the query.
# 
# Contained in extension ''poly_database''.
# @param String db name of the database, see ...
# @param String collection name of the collection
# @param Hash query
# @return Array<Object>
user_function poly_db {
	my $db_name = shift;
	my $collection = shift;
	my $query = shift;

	my $client = MongoDB::MongoClient->new(host=>$db_host.":".$db_port, db_name=>$db_name, username=>$db_user, password=>$db_pwd);
	my $db = $client->get_database($db_name);
	
	my $col = $db->get_collection($collection);

	my $output = $col->find($query);
		
	return cursor2array($output, $db_name, $collection);
}


# This is a helper function that transforms the database cursor into an array of polymake objects.
sub cursor2array {
	my $cursor = shift;
	my $db_name = shift;
	my $collection = shift;
	
	if (db_name == 'LatticePolytopes') {
		return cursor2array_lattice_polytope($cursor);
	} elsif (db_name =='Polytopes') {
		return cursor2array_polytope_rational($cursor);
	}
}


sub cursor2array_polytope_rational {
	my $cursor = shift;
	
	my $parray = new Array<Polytope<Rational>>($cursor->count+0);
	my $i = 0;

	while (my $p = $cursor->next) {
		$parray->[$i] = new Polytope<Rational>(%$p);
		++$i;
	}
	return $parray;
}


sub cursor2array_lattice_polytope {
	my $cursor = shift;
	
	my $parray = new Array<LatticePolytope>($cursor->count+0);
	my $i = 0;

	while (my $p = $cursor->next) {
		$parray->[$i] = new LatticePolytope(%$p);
		++$i;
	}
	return $parray;
}
