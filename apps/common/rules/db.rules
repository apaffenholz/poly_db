# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension polyDB.
# 
# polyDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# polyDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with polyDB.  If not, see <http://www.gnu.org/licenses/>.




# polyDB: The hostname of the database, default 'polymake.org'
#custom $db_host = "polymake.org";
custom $db_host = "130.83.68.137";

# polyDB: The port of the database, default 27017
custom $db_port = "27017";

# polyDB: The database username, default 'polymake'
custom $db_user = "polymake";

# polyDB: The database password, default 'database'
custom $db_pwd = "database";

# polyDB: The name of the authentication database, default 'admin'
custom $auth_db = "admin";

# polyDB: The name of the type database, default 'pm'
custom $type_db = "pm";

# polyDB: The name of the info database, default 'pm'
custom $info_db = "pm";

# polyDB: The name of the database you want to access. Set this if you want to access a certain database all (or most of) the time.
custom $db_name = "";

# polyDB: The name of the collection you want to access. Set this if you want to access a certain collection all (or most of) the time.
custom $collection_name = "";



# @category Database
# Returns all objects in the database //db// in //collection// that match the //query//. This is only recommended for a reasonably small number of matching objects. If you expect many such objects you should instead construct a [[DatabaseCursor]].
# 
# Contained in extension ''polyDB''.
# @param HASH query
# @option String db name of the database, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available databases
# @option String collection name of the collection, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available collections
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option Int limit limit the number of objects that will be returned (default: no limit)
# @option HASH sort_by specify a sorting order
# @option Int skip skip the first elements, default: 0
# @option String username Some databases might have access control.
# @option String password Some databases might have access control.
# @return Array<Core::Object>
user_function poly_db ($, {db => $db_name, collection => $collection_name, local => 0, limit => 0, username => $db_user, password => $db_pwd, skip => 0, sort_by => {}}){
	my ($query, $options) = @_;

	check_options($options);

	my $client = get_client($options);
	my $type = get_type($client, $options->{db}, $options->{collection});
	my $col = get_collection($client, $options->{db}, $options->{collection});	

	my $output = $col->find($query)->limit($options->{limit})->sort($options->{sort_by})->skip($options->{skip});
	unless ($output) {print "No such object.\n"; return;}
	
	undef $client;
	return cursor2array($output, $type, $options->{db}, $options->{collection});
}




# @category Database
# Returns one object in the database //db// in //collection// that matches the //query//.
# 
# Contained in extension ''polyDB''.
# @param HASH query
# @option String db name of the database, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available databases
# @option String collection name of the collection, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available collections
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username Some databases might have access control.
# @option String password Some databases might have access control.
# @return Core::Object
user_function poly_db_one ($, {db => $db_name, collection => $collection_name, local => 0, username => $db_user, password => $db_pwd, client => undef}){
	my ($query, $options) = @_;

	check_options($options);
	
	my $client;
	unless(defined($client = $options->{client})) {
		$client = get_client($options);
	}

	my $type = get_type($client, $options->{db}, $options->{collection});
	my $col = get_collection($client, $options->{db}, $options->{collection});	
		
	my $output = $col->find_one($query);
	
	unless ($output) { croak("No such object.\n"); }
	return doc2object($output, $type, $options->{db}, $options->{collection});
}


# @category Database
# Returns the number of objects in the database //db// in //collection// that match the //query//.
# 
# Contained in extension ''polyDB''.
# @param HASH query
# @option String db name of the database, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available databases
# @option String collection name of the collection, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available collections
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username Some databases might have access control.
# @option String password Some databases might have access control.
# @return Int
user_function poly_db_count($, {db => $db_name, collection => $collection_name, local => 0, username => $db_user, password => $db_pwd}) {
	my ($query, $options) = @_;

	check_options($options);

	my $client = get_client($options);
	my $type = get_type($client, $options->{db}, $options->{collection});
	my $col = get_collection($client, $options->{db}, $options->{collection});	

	undef $client;
	return $col->count($query);
}


# @category Database
# Returns the IDs of all objects in the database //db// in //collection// that match the //query//. This is only recommended for a reasonably small number of matching objects. If you expect many such objects you should instead construct a [[DatabaseCursor]].
# 
# Contained in extension ''polyDB''.
# @param HASH query
# @option String db name of the database, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available databases
# @option String collection name of the collection, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available collections
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option Int limit limit the number of objects that will be returned (default: no limit)
# @option HASH sort_by specify a sorting order
# @option Int skip skip the first elements, default: 0
# @option String username Some databases might have access control.
# @option String password Some databases might have access control.
# @return Array<String>
user_function poly_db_ids ($, {db => $db_name, collection => $collection_name, local => 0, limit => 0, username => $db_user, password => $db_pwd, skip => 0, sort_by => {}}){
	my ($query, $options) = @_;

	check_options($options);

	my $client = get_client($options);
	my $type = get_type($client, $options->{db}, $options->{collection});
	my $col = get_collection($client, $options->{db}, $options->{collection});	

	my $output = $col->find($query)->fields({'_id'=>1})->limit($options->{limit})->sort($options->{sort_by})->skip($options->{skip});
	unless ($output) {print "No such object.\n"; return;}
	
	undef $client;
	return new Array<String>(cursor2stringarray($output));
}


sub check_options {
	my $options = shift;
	unless ($options->{db}) { croak("Please specify a database.\n"); }
	unless ($options->{collection}) { croak("Please specify a collection.\n"); }
}
