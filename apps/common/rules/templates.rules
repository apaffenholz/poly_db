# Copyright (c) 2013-2016 Silke Horn, Andreas Paffenholz
# http://solros.de/polymake/poly_db
# http://www.mathematik.tu-darmstadt.de/~paffenholz
# 
# This file is part of the polymake extension polyDB.
# 
# polyDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# polyDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with polyDB.  If not, see <http://www.gnu.org/licenses/>.



# @category Database Write Access
# Returns the template object for the collection //col// of the database //db// (if this is set).
# 
# Contained in extension ''polyDB''.
# @param String db name of the database, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available databases
# @param String collection name of the collection, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available collections
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @return HASH
user_function get_template_old($, $, {local => 0, client => undef, template_key => 'default'}) {
	my ($db, $col, $options) = @_;
	my $local = $options->{local};
	
	my $client;
	unless(defined($client = $options->{client})) {
		$client	= get_client($local, "", "");
	}
		
	my $tcol = $client->get_database($db)->get_collection("type_information");
	my $r = $tcol->find_one({db => $db, col => $col, template_key => 'default'});
	unless ($r) { croak("no template data for collection $col in database $db"); }

	return $r->{'template'};
}


user_function get_db_template($, $, {local => 0, client => undef, template_key => 'default'}) {
	my ($db, $col, $options) = @_;
	my $local = $options->{local};
	
	my $client;
	unless(defined($client = $options->{client})) {
		$client	= get_client($local, "", "");
	}
		
	my $tcol = $client->get_database($db)->get_collection("type_information");
	my $r = $tcol->find_one({db => $db, col => $col, key => $options->{template_key}});
	unless ($r) { croak("no template data for collection $col in database $db"); }
	
	return $r->{'template'};
}

sub add_properties {
	my ($flat_properties, $initial, $t) = @_;
	foreach (keys %$t ) {
		if ( ref($t->{$_}) eq "HASH" ) {
			my @k = keys %{$t->{$_}};
			if ( $k[0] =~ /[A-Z]+/ ) {
				my $ini = $initial.".".$_;
				add_properties($flat_properties, $ini, $t->{$_});
			} else {
				my $props = " [";
				foreach ( keys %{$t->{$_}} ) {
					$props .= ", ".$_;
				}
				$props =~ s/, (.*)/$1/;
				$props .= "]";
				push @{$flat_properties}, $initial.".".$_." ".$props;
			}
		} else {
			if ( $t->{$_} != 0 ) {
				push @{$flat_properties}, $initial.".".$_;
			}
		}
	}
}


user_function polyDB_searchable_fields ($, $, {local => 0, client => undef, template_key => 'default'}) {
	my ($db, $col, $options) = @_;
	
	my $t = get_db_template ( $db, $col, $options);
	
	my $flat_properties = [];
	add_properties($flat_properties,"",$t);
	foreach (@$flat_properties) {
		s/.(.*)/$1/;
	}
	
	return new Array<String>(@{$flat_properties});
}



# returns the full template record for a given collection and a given key
user_function get_template($, $, {local => 0, tiny => 0, client => undef, template_key=>"default"}) {
	my ($db, $col, $options) = @_;
	my $local = $options->{local};
	my $template_key = $options->{"template_key"};
	
	my $client;
	unless(defined($client = $options->{client})) {
		$client	= get_client($local, "", "");
	}
		
	my $tcol = $client->get_database($db)->get_collection("type_information");
	my $template = $tcol->find({db => $db, col => $col, key=>$options->{template_key}})->next;
	unless ($template) {croak("no template data for collection $col in database $db with key $template_key");}
	
	return $template;
}



# @category Database Admin
# Set or update type (and template) information for collection //col// in the database //db//.
# 
# Note that you need write access to the type database for this.
# 
# Contained in extension ''polyDB''.
# @param String db database name
# @param String col collection name
# @option String app application name for the objects
# @option String type type name for the objects
# @option String version polymake version, will be set to the current version by default
# @option String contributor
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username
# @option String password
# @option Core::Object template
# @option Bool verbose
user_function set_type_info($, $, {app => "", type => "", version => "", contributor => "", local => 0, username => "", password => "", template_key => 'default', template => undef, db_template => undef, version => "", verbose => 0}) {
	my ($db, $col, $options) = @_;

	my $client = get_client($options);
		
	my $tdb = $client->get_database($db);
	my $tcol = $tdb->get_collection("type_information");

	my $update = 0;
	my $h = {};
	if ($tcol->find_one({'db'=>$db, 'col'=>$col, 'key' => $options->{template_key} })) {
		$update = 1;
	} else {
		$h = {'db'=>$db, 'col'=>$col, 'key' => $options->{template_key} };
	}

	if ($options->{app}) {
		# TODO: check whether old template object matches type and app
		$h->{app} = $options->{app};
	}
	if ($options->{type}) {
		$h->{type} = $options->{type};
	}
	if ($options->{version}) {
		$h->{version} = $options->{version};
	} elsif (!$update) {
		$h->{version} = $Version;
	}
	if ($options->{contributor}) {
		$h->{contributor} = $options->{contributor};
	}

	if (defined(my $t = $options->{template})) {
		$h->{template} = $t;
	}
	if (defined(my $t = $options->{db_template})) {
		$h->{db_template} = $t;
	}
	
	if ($update) {
		my $output = $tcol->update({'db'=>$db, 'col'=>$col}, {'$set' => $h});
		if ($options->{verbose}) {
			if ($output->{ok}) {
				print "successfully updated type information for $db.$col\n"
			} else {
				print "an error occurred when trying to update type information for $db.$col:\n$output\n";
			}
		}
	
	} else {
		my $output = $tcol->save($h);
		if ($options->{verbose}) {
			if ($output->{ok}) {
				print "successfully saved type information for $db.$col\n";
			} else {
				print "an error occurred when trying to save type information for $db.$col:\n$output\n";
			}
		}
	}
		
	undef $client;
}


function db_clean_up_type_info ($, $, {username => "", password => ""}) {
	my ($db, $col, $options) = @_;
	
	my $client = get_client($options);
		
	my $tdb = $client->get_database($db);
	my $tcol = $tdb->get_collection("type_information");
	
	$tcol->remove({"db"=>$db, "col"=>$col});
	
	$tdb->get_collection($col)->drop();
}
