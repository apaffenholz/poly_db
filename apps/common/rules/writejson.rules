# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension polyDB.
# 
# polyDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# polyDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with polyDB.  If not, see <http://www.gnu.org/licenses/>.

use PolyDB::JSONwriter;

sub write_json {
	my ($object)=@_;
	my $writer=new PolyDB::JSONwriter;

	my $object_type=$object->type;


	$writer->startTag("object",
        defined($object->name) ? (name => $object->name) : (),
        Polymake::Core::XMLwriter::type_attr($writer, $object_type),
        Polymake::Core::XMLwriter::top_ext_attr($writer, $object_type),
        version => $Version,
    );

	Polymake::Core::XMLwriter::write_object_contents($writer, $object);
	$writer->endTag("object");

	return $writer->string;
}

sub pm2json {
	my ($object, $id, $temp, $add_props, $rem_props) = @_;
	# add_props contains database properties
	# rem_props contains properties that are stored collection wide in the type db and are not written to the database
	# temp should be set to 1 for a template object
	
	my $json = write_json($object);
	$json =~ s/\s\:\s/ => /g;
	my $r = eval($json);
		
	foreach (keys %$add_props) {
		$r->{$_} = $add_props->{$_};
	}
	foreach (@$rem_props) {
		next if $_ eq "_id";
		delete $r->{$_};
	}
	unless ($temp) {
		$r->{_id} = $id;
		$r->{date} = get_date();
	}
	return $r;
}

# Polymake::Core::XMLwriter::type_attr produces the type attribute needed for some properties (e.g. type => SparseMatrix, etc)


sub write_subobject {
	my ($writer, $object, $parent, $expected_type)=@_;
	my $type=$object->type;
	$writer->startTag( "object",
		length($object->name) ? (name => $object->name) : (),
        $type != $expected_type ? 
        	(Polymake::Core::XMLwriter::type_attr($writer, $type->pure_type, $parent),
			$type->extension ? 
				Polymake::Core::XMLwriter::ext_attr($writer, $type->extension, $_[4]) 
				: ()
        	)
            : ()
        );
   Polymake::Core::XMLwriter::write_object_contents($writer,$object);
   $writer->endTag("object");
}
