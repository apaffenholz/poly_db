# Copyright (c) 2013 Silke Horn
# http://solros.de/polymake/poly_database
# 
# This file is part of the polymake extension poly_database.
# 
# poly_database is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# poly_database is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with poly_database.  If not, see <http://www.gnu.org/licenses/>.

use Term::ReadKey;


sub get_credentials {
	# TODO: cache, key chain??
	print "user name: ";
	my $u= <STDIN>;
	ReadMode 2;
	print "password: ";
	my $p= <STDIN>;
	ReadMode 0;
	print "\n";
	chomp($u);
	chomp($p);
	return ($u,$p);
}

# @category Database
# Adds an object //obj// to the collection //col// in the database //db//. First it matches its properties with a template object //temp//.
# 
# Note that you need admin access to the database for this. You will be asked for credentials if you don't specify them.
# @param obj Core::Object
# @param String db database name
# @param String col collection name
# @param String id
# @param String contrib
# @param Bool local
# @param String username optional
# @param String password optional
# @return String
user_function poly_db_insert {
	my ($obj, $db, $col, $id, $contrib, $local, $u, $p) = @_;
	
	unless ($u) {
		my @cred = get_credentials;
		$u = $cred[0];
		$p = $cred[1];
	}
	
	my $temp = get_template_object($db, $col, $local);
#	print $temp->list_properties();
#	print "\n";
	copy_properties_db($obj, $temp);
#	print "copied\n";
#	print $obj->list_properties;
	my $client = MongoDB::MongoClient->new;	
#	my $client = MongoDB::MongoClient->new(host=>$db_host.":".$db_port, db_name=>$auth_db, username=>$u, password=>$p);
		
	my $db = $client->get_database($db);
	my $col = $db->get_collection($col);
	my $output = $col->insert(pm2json($obj, $id, $contrib));
	return $output;
}

user_function poly_db_force_insert {
	my ($obj, $db, $col, $id, $contrib, $local, $u, $p) = @_;
	my $client = MongoDB::MongoClient->new;	
		
	my $db = $client->get_database($db);
	my $col = $db->get_collection($col);
	my $output = $col->insert(pm2json($obj, $id, $contrib));
	return $output;
}

# @category Database
# Adds an object //obj// to the collection //col// in the database //db//. First it matches its properties with a template object //temp// (but without computing additional properties).
# 
# Note that you need admin access to the database for this. You will be asked for credentials if you don't specify them.
# @param obj Core::Object
# @param String db database name
# @param String col collection name
# @param String username optional
# @param String password optional
user_function poly_db_fast_insert {
	my ($obj, $temp, $db, $col, $id, $contrib, $u, $p) = @_;
 	
	unless ($u) {
		my @cred = get_credentials;
		$u = $cred[0];
		$p = $cred[1];
	}
	
	my $temp = get_template_object($db, $col, $local);
	copy_properties_nonew_db($obj, $temp);
	
	my $client = MongoDB::MongoClient->new;	
#	my $client = MongoDB::MongoClient->new(host=>$db_host.":".$db_port, db_name=>$auth_db, username=>$u, password=>$p);
		
	my $db = $client->get_database($db);
	my $col = $db->get_collection($col);
	my $output = $col->insert(pm2json($obj, $id, $contrib));
	return $output;
}

sub pm2json {
	my ($p, $id, $contrib) = @_;
	
	my $c = $p->contents;
	my $r = {};
	
	$r->{'_id'} = $id;
	$r->{'contributor'} = $contrib;
	$r->{'date'} = get_date();

	print "\n";
	foreach my $pv (@$c) {
#		print $pv->property->qual_name."\n".$pv->value."\n";
		my $x = to_json($pv->value, $pv->property->type->mangled_name); 
		$r->{$pv->property->qual_name} = $x;
	}
	return $r;
}

sub pm2temp {
	my ($p) = @_;
	
	my $c = $p->contents;
	my $r = {};
	
	foreach my $pv (@$c) {
		my $x = to_json($pv->value, $pv->property->type->mangled_name); 
		$r->{$pv->property->qual_name} = $x;
	}
	return $r;

}

sub get_date {
	use DateTime;
	return DateTime->today;	
}

sub to_json {
	my $p = shift;
	my $mtype = shift;
	my $flag = shift;
	my @t = split('__', $mtype, 2);
	my $t = $t[0];
	my $rtype = $t[1];
	
	if ($t eq 'Int' || $t eq 'Bool' || $t eq 'Float' || $t eq 'String' || $t eq 'Rational') {
#		print "$p scalar\n";
		if ($flag) {
			return "$p";
		} else {
			return $p;
		}
	}
	if ($t eq 'Integer' || $t eq 'Long') {
#		print "$p integer\n";
		if ($flag) {
			return "$p";
		} else {
			return int("$p");
		}
	}
	
	if ($t eq 'Array' || $t eq 'Vector' || $t eq 'Set' || $t eq 'List') {
#		print "$p array\n";
		my @r = ();
		foreach (@$p) {
			push @r, to_json($_, $rtype, 1);
		}
		return \@r;
	}

	if ($t eq 'Matrix' || $t eq 'Matrix_A_Rational_I_NonSymmetric_Z') {
#		print "$p matrix\n";
		my @r = ();
		foreach (@$p) {
			push @r, to_json($_, $_->type->mangled_name, 1);
		}
		return \@r;
	}
	if ($t eq 'SparseVector' || $t eq 'SparseMatrix') {
#		print "sparse\n";
		$mtype =~s/Sparse//g;
		return to_json(dense($p), $mtype, $flag);
	}
	else {
		return "$p";
	}
}
