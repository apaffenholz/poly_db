# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension polyDB.
# 
# polyDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# polyDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with polyDB.  If not, see <http://www.gnu.org/licenses/>.



# @category Utilities
# Takes an [[Core::Object|Object]] //obj// and a template [[Core::Object|Object]] of the same type and computes properties so that //obj// has all properties that //template// has.
# 
# Contained in extension ''polyDB''.
# @param Core::Object obj
# @param Core::Object template


sub adjust_properties_at_level {
	my ($prefix, $o, $p, $properties, $options) = @_;

	my %knownproperties;
	if ( $prefix eq "" ) {
		%knownproperties = map { $_->property->name => 1 } @{$o->contents};	
	} else {
		%knownproperties = map { $_->property->name => 1 } @{$o->give($prefix)->contents};	
	}
	foreach my $pv (keys %$properties) {		
		my $prop = $pv;
		if ( $prefix ne "" ) {
			$prop = $prefix.".".$pv;
		}
		if ( $properties->{$pv} == 1 ) {
			if ( exists($knownproperties{$pv} ) ) {
				if ( !$options->{keep_all_props} ) { # otherwise it is in $p already
					# we get property from $o
					my $val = $o->give($prop);
					# and pass them on to $p
					$p->take($prop,$val);
					
				}
			} else { 
				if ( !$options->{nonew} ) {
					# FIXME using a schedule apparently does not work
					# my $s = $o->get_schedule($pv);
					# $s->apply($o);
				
					# we compute properties in $o
					my $val = $o->give($prop);
					# and pass them on to $p
					$p->take($prop,$val);
				}
			}
		} else {
			if ( exists($knownproperties{$pv}) || !$options->{nonew} ) {
				adjust_properties_at_level($prop, $o, $p, $properties->{$pv}, $options);
			}
		}
	}	
	
}


user_function adjust_properties {
	my ($o, $t, $options ) = @_;

	my $p;
	if ( $options->{keep_all_props} ) {
		$p = $o->copy;
		$p->begin_transaction;
	} else {
	# create a new polytope
		$p=eval("new ".$t->{basic_type}.";");	
	}
	
	my $properties = $t->{'template'};
	adjust_properties_at_level("",$o,$p,$properties,$options);
	
	$p->commit;
	return $p;
}





