# Copyright (c) 2013 Silke Horn
# http://solros.de/polymake/poly_database
# 
# This file is part of the polymake extension poly_database.
# 
# poly_database is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# poly_database is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with poly_database.  If not, see <http://www.gnu.org/licenses/>.

CREDIT poly_database

use MongoDB;
use MongoDB::OID;


# @category Database
# Returns the polytopes in the database of a given dimension //d//.
# Equivalent to [[poly_db]]({'CONE_DIM' => //d//+1}).
# 
# Contained in extension ''poly_database''.
# @param Int d
# @return Array<LatticePolytope>
user_function poly_db_dim {
	my $d = shift;
	return poly_db({'CONE_DIM' => $d+1});
}

# @category Database
# Returns the (unique) polytope in the database with a given [[_id]].
# The IDs are of the form ''F.(dim)D.(some digits)'', e.g. ''F.3D.0000'' is the first 3-dimensional polytope in the database.
# 
# Contained in extension ''poly_database''.
# @param String id
# @return LatticePolytope
user_function poly_db_id {
	my $id = shift;
	return poly_db({'_id' => $id})->[0];
}

# @category Database
# Returns the polytopes in the database with a given number of vertices.
# Equivalent to [[poly_db]]({'N_VERTICES' => n}).
# 
# Contained in extension ''poly_database''.
# @param Int n
# @return Array<LatticePolytope>
user_function poly_db_vertices {
	my $n = shift;
	return poly_db({'N_VERTICES' => $n});
}


# @category Database
# Returns the polytopes in the database that match the query.
# 
# Contained in extension ''poly_database''.
# @param Hash query
# @return Array<LatticePolytope>
user_function poly_db {
	my $query = shift;

	my $client = MongoDB::MongoClient->new;
	my $db = $client->get_database('pm');
	
	my $polys = $db->get_collection('lattice_polys');
	
	my $output = $polys->find($query);
	
	return cursor2array($output);
}


sub cursor2array {
	my $cursor = shift;
	
	my $parray = new Array<LatticePolytope>($cursor->count+0);
	my $i = 0;

	while (my $p = $cursor->next) {
		$parray->[$i] = new LatticePolytope(%$p);
		++$i;
	}
	return $parray;
}