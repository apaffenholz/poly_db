# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension polyDB.
# 
# polyDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# polyDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with polyDB.  If not, see <http://www.gnu.org/licenses/>.



# @category Database Write Access
# Returns the template object for the collection //col// of the database //db// (if this is set).
# 
# Contained in extension ''polyDB''.
# @param String db name of the database, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available databases
# @param String collection name of the collection, see [[http://www.polymake.org/doku.php/data|here]] or [[db_info]] for available collections
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option Bool tiny, default 0
# @return Core::Object
user_function get_template_object($, $, {local => 0, tiny => 0, client => undef}) {
	my ($db, $col, $options) = @_;
	my $local = $options->{local};
	
	my $client;
	unless(defined($client = $options->{client})) {
		$client	= get_client($local, "", "");
	}
		
	my $tcol = $client->get_database($type_db)->get_collection("Types");

	my $doc = $tcol->find({db => $db, col => $col})->next;
	
	unless ($doc) {croak("no template data for collection $col in database $db");}
	
	my $r;
	if ($options->{tiny}) {
		$r = doc2object($doc->{'tinytemplate'}, $doc);
	} else {
		$r = doc2object($doc->{'template'}, $doc);
	}
	
	return $r;
}





# @category Database Admin
# Set or update type (and template) information for collection //col// in the database //db//.
# 
# Note that you need write access to the type database for this.
# 
# Contained in extension ''polyDB''.
# @param String db database name
# @param String col collection name
# @option String app application name for the objects
# @option String type type name for the objects
# @option String version polymake version, will be set to the current version by default
# @option String contributor
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username
# @option String password
# @option Core::Object template
# @option Core::Object tinytemplate template object with minimal set of properties
user_function set_type_info($, $, {app => "", type => "", version => "", contributor => "", local => 0, username => "", password => "", template => undef, tinytemplate => undef, version => ""}) {
	my ($db, $col, $options) = @_;

	my $client = get_client($options);
		
	my $tdb = $client->get_database($type_db);
	my $tcol = $tdb->get_collection("Types");

	my $update = 0;
	my $h = {};
	if ($tcol->find_one({'db'=>$db, 'col'=>$col})) {
		$update = 1;
	} else {
		$h = {'db'=>$db, 'col'=>$col};
	}

	if ($options->{app}) {
		# TODO: check whether old template object matches type and app
		$h->{app} = $options->{app};
	}
	if ($options->{type}) {
		$h->{type} = $options->{type};
	}
	if ($options->{version}) {
		$h->{version} = $options->{version};
	} elsif (!$update) {
		$h->{version} = $Version;
	}
	if ($options->{contributor}) {
		$h->{contributor} = $options->{contributor};
	}

	if (defined(my $obj = $options->{template})) {
		my $json = pm2json($obj, undef, undef, undef, 1);
		$h->{template} = $json;
		$h->{app} = $json->{app};
		$h->{type} = $json->{type};
	}
	if (defined(my $obj = $options->{tinytemplate})) {
		$h->{tinytemplate} = pm2json($obj, undef, undef, undef, 1);
		# TODO: app and type
	}

	
	if ($update) {
		my $output = $tcol->update({'db'=>$db, 'col'=>$col}, {'$set' => $h});

		if ($output->{ok}) {
			print "successfully updated type information for $db.$col\n"
		} else {
			print "an error occurred when trying to update type information for $db.$col:\n$output\n";
		}
	
	} else {
		my $output = $tcol->save($h);

		if ($output->{ok}) {
			print "successfully saved type information for $db.$col\n";
		} else {
			print "an error occurred when trying to save type information for $db.$col:\n$output\n";
		}
	}
		
	undef $client;
}
