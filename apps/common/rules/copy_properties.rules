# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension polyDB.
# 
# polyDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# polyDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with polyDB.  If not, see <http://www.gnu.org/licenses/>.



# @category Utilities
# Takes an [[Core::Object|Object]] //obj// and a template [[Core::Object|Object]] of the same type and computes properties so that //obj// has all properties that //template// has.
# 
# Contained in extension ''polyDB''.
# @param Core::Object obj
# @param Core::Object template
user_function copy_properties {
	my ($o, $t) = @_;

	# TODO: check that $o and $t are of compatible types
	
	# compute missing properties (one by one, in no particular order)
	foreach my $pv (@{$t->contents}) {
		next if !defined($pv) || $pv->property->flags & $Property::is_non_storable;
		
      	if (instanceof Core::Object($pv)) {
      		# make sure $o has this property (will most probably compute only the most trivial subproperty, such as CONNECTED for GRAPH of a Polytope)
			my $s = $o->get_schedule($pv->property->name);
			$s->apply($o);
			
			my $subobj = $o->contents->[$o->dictionary->{$pv->property->key}];
      		
      		# recursive call
      		copy_properties($subobj, $pv);
      		
      	} else {
			my $s = $o->get_schedule($pv->property->name);
			$s->apply($o);
		}
	}

}


user_function compute_properties {
	my ($o, $t) = @_;

	# TODO: check that $o and $t are of compatible types
	
	print $t;
	
	# compute missing properties (one by one, in no particular order)
	foreach my $pv (@{$t->{'template'}}) {
		print "computing ".$pv."\n";
		my $s = $o->get_schedule($pv);
		$s->apply($o);
	}

}