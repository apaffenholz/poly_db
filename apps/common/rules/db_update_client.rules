# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/poly_db
# 
# This file is part of the polymake extension poly_db.
# 
# poly_db is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# poly_db is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with poly_db.  If not, see <http://www.gnu.org/licenses/>.

use Sys::Hostname;
use DateTime;



user_function poly_db_work_on_packages ($, $, {local => 0, username => "", password => "", contrib => "", package_size => 1000}) {

	my $next = db_get_package("LatticePolytopes", "SmoothReflexive", $options);
	
	poly_db_batch_update_smooth_reflexive($next);
	
	
}

# @category Database Update Client
# Updates a pack of objects in the collection SmoothReflexive in the database LatticePolytopes. It updates the objects 
# Moreover, it matches their properties with the template object for this collection. (This is more efficient then looping over the list.)
# 
# Note that you need write access to the database for this. You will be asked for credentials if you don't specify them.
# 
# Contained in extension ''poly_db''.
# @param Int package
# @option Bool local set to 1 if you want to use a local database (on localhost), default 0
# @option String username
# @option String password
# @option String contrib use this to update the [[contributor]]
# @option Int package_size
user_function poly_db_batch_update_smooth_reflexive($, {local => 0, username => "", password => "", contrib => "", package_size => 1000}) {
	my ($pack, $options) = @_;

	my $u = $options->{username};
	my $p = $options->{password};
	my $local = $options->{local};
	my $ps = $options->{package_size};
	
	unless ($u || $local) {
		my @cred = get_credentials;
		$u = $cred[0];
		$p = $cred[1];
	}

	my $db_name = "LatticePolytopes";
	my $col_name = "SmoothReflexive";

	my $t = get_template_object($db_name, $col_name, local => $local);
	
	my $fst = $pack*$ps;
	
	my $fst_id = get_id($dim, $fst);
	my $fst_obj;
	unless ($fst_obj = poly_db_one($db_name, $col_name, {'_id' => $fst_id}, $options->{local})) {
		print "non-existent id: $fst_id\n";
		return;
	}

	my $sched = $fst_obj->get_schedule($t->list_properties);
	
	for (my $i = 0; $i < $ps; ++$i) {
		my $id = get_id($dim, $fst+$i);
		my $obj;
		unless ($obj = poly_db_one($db_name, $col_name, {'_id' => $id}, $options->{local})) {
			print "non-existent id: $id\n";
			return;
		}

		my $contrib;
		unless ($contrib = $options->{contrib}) {
			$contrib = $obj->contributor;	
		}
		
		poly_db_update_one($db_name, $col_name, $obj, local => $local, username => $u, password => $p, contrib => $contrib, schedule => $sched, template => $t);
	}
}


function db_get_package($, $, {local => 0, username => "", password => ""}) {
	my ($db_name, $col_name, $options) = @_;
	my $u = $options->{username};
	my $p = $options->{password};
	my $local = $options->{local};
	
	unless ($u || $local) {
		my @cred = get_credentials;
		$u = $cred[0];
		$p = $cred[1];
	}
	
	my $client = get_client($local, $u, $p);
	
	my $col = get_collection($client, $db_name, $col_name."_status");
	
	my $package = $col->find_one({'done'=>0, 'active'=>0});
	my $p = $package->{_id};

	$col->update({'_id' => $p},{'$set' => {'active'=>1} });


	$col->update({'_id' => $p},{'$set' => {'active'=>1, 'hostname'=>hostname(), 'start'=>DateTime->now} });
	
	return $p;
}

function db_finish_package($, $, $, {local => 0, username => "", password => ""}) {
	my ($db_name, $col_name, $id, $options) = @_;
	my $u = $options->{username};
	my $p = $options->{password};
	my $local = $options->{local};
	
	unless ($u || $local) {
		my @cred = get_credentials;
		$u = $cred[0];
		$p = $cred[1];
	}
	
	my $client = get_client($local, $u, $p);
	
	my $col = get_collection($client, $db_name, $col_name."_status");
	
	$col->update({'_id'=>$id},{'$set' => {'done'=>1, 'end'=>DateTime->now} });
}

user_function create_packages ($, $, $, $, {local => 0, username => "", password => ""}) {
	my ($db_name, $col_name, $query, $package_size, $options) = @_;
	
	my $total = poly_db_count($db_name, $col_name, $query, $local);
	
	my $npack = ceil($total/$package_size);
	
	my $client = get_client($local, $u, $p);
	
	my $col = get_collection($client, $db_name, $col_name."_status");
	
	for (my $i = 0; $i < $npacks; ++$i) {
		$col->insert({'_id'=>$i, 'done'=>0, 'active'=>0});
	}
}

sub get_id {
	my ($d, $i) = @_;
	
	if ($d <= 6) {
		return sprintf ("F.%dD.%04d", $d, $i);
	}
	if ($d == 8) {
		return sprintf ("F.%dD.%06d", $d, $i);
	}
}
